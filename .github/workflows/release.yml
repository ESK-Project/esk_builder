name: Release Build
permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        variant:
          - { name: "Non-KSU", KSU: "NONE", SUSFS: "false", LXC: "false" }
          - { name: "Non-KSU-LXC", KSU: "NONE", SUSFS: "false", LXC: "true" }
          - { name: "KSU", KSU: "OFFICIAL", SUSFS: "false", LXC: "false" }
          - { name: "KSU-SUSFS", KSU: "OFFICIAL", SUSFS: "true", LXC: "false" }
          - { name: "KSU-LXC", KSU: "OFFICIAL", SUSFS: "false", LXC: "true" }
          - { name: "KSU-SUSFS-LXC", KSU: "OFFICIAL", SUSFS: "true", LXC: "true" }
          - { name: "KSUN", KSU: "NEXT", SUSFS: "false", LXC: "false" }
          - { name: "KSUN-SUSFS", KSU: "NEXT", SUSFS: "true", LXC: "false" }
          - { name: "KSUN-LXC", KSU: "NEXT", SUSFS: "false", LXC: "true" }
          - { name: "KSUN-SUSFS-LXC", KSU: "NEXT", SUSFS: "true", LXC: "true" }
          - { name: "SUKISU", KSU: "SUKI", SUSFS: "false", LXC: "false" }
          - { name: "SUKISU-SUSFS", KSU: "SUKI", SUSFS: "true", LXC: "false" }
          - { name: "SUKISU-LXC", KSU: "SUKI", SUSFS: "false", LXC: "true" }
          - { name: "SUKISU-SUSFS-LXC", KSU: "SUKI", SUSFS: "true",LXC: "true" }
    name: Build ${{ matrix.variant.name }} variant
    uses: ./.github/workflows/build.yml
    secrets: inherit
    with:
      KSU: ${{ matrix.variant.KSU }}
      SUSFS: ${{ matrix.variant.SUSFS }}
      LXC: ${{ matrix.variant.LXC }}
      RELEASE_BUILD: true

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    env:
      KERNEL_VER: ${{ needs.build.outputs.kernel_version }}
      SUSFS_VER: ${{ needs.build.outputs.susfs_version }}
      TOOLCHAIN: ${{ needs.build.outputs.toolchain }}
      BUILD_DATE: ${{ needs.build.outputs.build_date }}
      RELEASE_REPO: ${{ needs.build.outputs.release_repo }}
      RELEASE_BRANCH: ${{ needs.build.outputs.release_branch }}
      KERNEL_NAME: ${{ needs.build.outputs.kernel_name }}

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Download All Artifacts
        uses: actions/download-artifact@v5
        with:
          path: release_files

      - name: Generate new tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          RELEASE_REPO: ${{ env.RELEASE_REPO }}
        run: |
          LATEST_TAG=$(gh api repos/$RELEASE_REPO/tags \
           --header "Authorization: token $GH_TOKEN" \
           --jq '.[0].name')

          LATEST=${LATEST_TAG#v}

          if [[ -z "$LATEST" ]]; then
            RELEASE_TAG="v1.0"
          else
            MAJOR=${LATEST%.*}
            MINOR=${LATEST#*.}

            if (( MINOR == 9 )); then
              (( MAJOR++ ))
              MINOR=0
            else
              (( MINOR++ ))
            fi

            RELEASE_TAG="v${MAJOR}.${MINOR}"
          fi

          echo "New tag: $RELEASE_TAG"
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV

      - name: Upload builds to release
        uses: softprops/action-gh-release@v2
        with:
          repository: ${{ env.RELEASE_REPO }}
          name: "${{ env.KERNEL_NAME }} Kernel ${{ env.RELEASE_TAG }}"
          tag_name: ${{ env.RELEASE_TAG }}
          token: ${{ secrets.GH_TOKEN }}
          body: |
            ### Key Changes

            - Add your key changes here.

            ---

            ### Build Information

            | Component | Version |
            |-----------|---------|
            | **Kernel Version** | `${{ env.KERNEL_VER }}` |
            | **SUSFS** | `${{ env.SUSFS_VER }}` |
            | **Toolchain** | `${{ env.TOOLCHAIN }}` |
            | **Build Date** | `${{ env.BUILD_DATE }}` |

            ---

            ### Variants Suffixes

            | Suffix | Description |
            |--------|-------------|
            | **-OFFICIAL** | Original KernelSU |
            | **-SUKI** | SukiSU Ultra |
            | **-KSUN** | KernelSU Next |
            | **-Non-KSU** | No KernelSU |
            | **-SUSFS** | SUSFS Support |
            | **-LXC** | LXC Support |

            > [!IMPORTANT]
            > For installation instructions and issue reporting guidelines, please refer to the README.md
          generate_release_notes: false
          target_commitish: ${{ env.RELEASE_BRANCH }}
          files: release_files/**/*

      - name: Notify Telegram
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        run: |
          escape_md_v2() {
            local s=$*
            s=${s//\\/\\\\}; s=${s//_/\\_}; s=${s//\*/\\*}; s=${s//\[/\\[}; s=${s//\]/\\]}; s=${s//\(/\\(}; s=${s//\)/\\)}
            s=${s//\`/\\\`}; s=${s//>/\\>}; s=${s//#/\\#}; s=${s//+/\\+}; s=${s//-/\\-}; s=${s//= /\\=}; s=${s//=/\\=}
            s=${s//|/\\|}; s=${s//\{/\\\{}; s=${s//\}/\\\}}; s=${s//\./\\.}; s=${s//\!/\\!}; s=${s//~/\\~}
            echo "$s"
          }

          telegram_send_msg() {
            local resp err

            resp=$(curl -sX POST https://api.telegram.org/bot"${TG_BOT_TOKEN}"/sendMessage \
                -d chat_id="${TG_CHAT_ID}" \
                -d parse_mode="MarkdownV2" \
                -d disable_web_page_preview=true \
                -d text="$1")

            if ! echo "$resp" | jq -e '.ok == true' > /dev/null; then
                err=$(echo "$resp" | jq -r '.description')
                echo "::error::telegram_send_msg(): failed to send message: ${err:-Unknown error} $*" >&2
                exit 1
            fi
          }

          message=$(
              cat<<EOF
          *$(escape_md_v2 "$KERNEL_NAME Release Build Completed!")*

          *Kernel Version*: $(escape_md_v2 ${{ env.KERNEL_VER }})
          *SuSFS*: $(escape_md_v2 ${{ env.SUSFS_VER }})
          *Toolchain*: $(escape_md_v2 ${{ env.TOOLCHAIN }})
          *Build date*: $(escape_md_v2 ${{ env.BUILD_DATE }})

          [GitHub Release]($(escape_md_v2 https://github.com/${{ env.RELEASE_REPO }}/releases/${{ env.RELEASE_TAG }}))
          EOF
          )
          
          telegram_send_msg "$message"
